/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vistas;

import accesoADatos.AlumnoData;
import accesoADatos.InscripcionData;
import accesoADatos.MateriaData;
import entidades.Alumno;
import entidades.Inscripcion;
import entidades.Materia;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;


/**
 *
 * @author telma
 */
public class NotaView extends javax.swing.JInternalFrame {
AlumnoData alumnoData=new AlumnoData();
DefaultTableModel modelo=new DefaultTableModel();
InscripcionData inscripcionData=new InscripcionData();
MateriaData materiaData=new MateriaData(); 

    public NotaView() {
        initComponents();
        setSize(586, 524);
        cargarCombo();
        armarCabecera();
        cargarInscripcion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bGuardar = new javax.swing.JButton();
        bSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbNotas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbListadoAlumnos = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setPreferredSize(new java.awt.Dimension(586, 524));

        jPanel1.setBackground(new java.awt.Color(39, 60, 117));
        jPanel1.setPreferredSize(new java.awt.Dimension(586, 524));
        jPanel1.setLayout(null);

        bGuardar.setBackground(new java.awt.Color(12, 43, 135));
        bGuardar.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        bGuardar.setForeground(new java.awt.Color(255, 255, 255));
        bGuardar.setText("Guardar");
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(bGuardar);
        bGuardar.setBounds(20, 450, 100, 28);

        bSalir.setBackground(new java.awt.Color(12, 43, 135));
        bSalir.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        bSalir.setForeground(new java.awt.Color(255, 255, 255));
        bSalir.setText("Salir");
        bSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalirActionPerformed(evt);
            }
        });
        jPanel1.add(bSalir);
        bSalir.setBounds(480, 450, 72, 25);

        tbNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbNotas);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 110, 530, 310);

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 0, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Seleccione un Alumno");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 50, 220, 25);

        cbListadoAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbListadoAlumnosActionPerformed(evt);
            }
        });
        jPanel1.add(cbListadoAlumnos);
        cbListadoAlumnos.setBounds(279, 50, 270, 25);

        jLabel2.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Carga de Notas");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(11, 10, 550, 21);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbListadoAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbListadoAlumnosActionPerformed
      cargarInscripcion();  
    }//GEN-LAST:event_cbListadoAlumnosActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        int filaSeleccionada = tbNotas.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idAlumno = ((Alumno) cbListadoAlumnos.getSelectedItem()).getIdAlumno();
            int idMateria = (int) tbNotas.getValueAt(filaSeleccionada, 0);
            try {
                String notaString = (String) tbNotas.getValueAt(filaSeleccionada, 2);
                double nuevaNota = Double.parseDouble(notaString);
                if (nuevaNota > 0 && nuevaNota <= 10) {
                    inscripcionData.actualizarNota(idAlumno, idMateria, nuevaNota);

                } else {
                    JOptionPane.showMessageDialog(null, "Notas validas: entre 1 y 10.");
                }
            } catch (ClassCastException e) {
                JOptionPane.showMessageDialog(null, "Debe ingresar nota y presionar Enter \n" + e.getMessage());
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Ingrese una nota valida.");
            }

            limpiarTabla();
            cargarInscripcion(); // Actualizar la tabla despuÃ©s de modificar...
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una materia para actualizar la nota.");
        }
    }//GEN-LAST:event_bGuardarActionPerformed

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        dispose();
    }//GEN-LAST:event_bSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bSalir;
    private javax.swing.JComboBox<Alumno> cbListadoAlumnos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbNotas;
    // End of variables declaration//GEN-END:variables

    private void cargarCombo() {
        List<Alumno> listaAlumnos = new ArrayList<>();
        listaAlumnos=alumnoData.listarAlumnos();
        Collections.sort(listaAlumnos);
        if(listaAlumnos!=null){
        for (Alumno alumno : listaAlumnos) {
                cbListadoAlumnos.addItem(alumno);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay alumnos para agregar");
        }
    }

    private void armarCabecera() {
        modelo.addColumn("codigo");
        modelo.addColumn("nombre");
        modelo.addColumn("nota");
        tbNotas.setModel(modelo);
        
    }

    private void cargarInscripcion() {
        limpiarTabla();
        Alumno alumno=(Alumno) cbListadoAlumnos.getSelectedItem();
        if(alumno!=null){
            List<Inscripcion> inscripciones=inscripcionData.obtenerInscripcionesPorAlumno(alumno.getIdAlumno());
            for (Inscripcion inscripcion : inscripciones) {
                Materia materia=materiaData.buscarMateria(inscripcion.getMateria().getIdMateria());
                modelo.addRow(new Object[]{materia.getIdMateria(), materia.getNombre(), inscripcion.getNota()});
                
            }
        }
    }
    
    private void limpiarTabla(){
        modelo.setRowCount(0);
    }
    


}

